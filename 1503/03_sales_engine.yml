submissions:
    Template
    repository: 
    evaluation:
      notes: |
             |
             |
        Assessor: 
          1. Functional Expectations
          4: Application fulfills all base expectations and two extensions
          3: Application fulfills all base expectations as tested by the spec harness
          2: Application has some missing functionality but no crashes
          1: Application crashes during normal usage

          2. Test-Driven Development
          4: Application is broken into components which are well tested in both isolation and integration using appropriate data
          3: Application is well tested but does not balance isolation and integration tests, using only the data necessary to test the functionality
          2: Application makes some use of tests, but the coverage is insufficient
          1: Application does not demonstrate strong use of TDD

          3. Encapsulation / Breaking Logic into Components
          4: Application is expertly divided into logical components each with a clear, single responsibility
          3: Application effectively breaks logical components apart but breaks the principle of SRP
          2: Application shows some effort to break logic into components, but the divisions are inconsistent or unclear
          1: Application logic shows poor decomposition with too much logic mashed together

          4. Fundamental Ruby & Style
          4: Application demonstrates excellent knowledge of Ruby syntax, style, and refactoring
          3: Application shows strong effort towards organization, content, and refactoring
          2: Application runs but the code has long methods, unnecessary or poorly named variables, and needs significant refactoring
          1: Application generates syntax error or crashes during execution

          5. Enumerable & Collections
          4: Application consistently makes use of the best-choice Enumerable methods
          3: Application demonstrates comfortable use of appropriate Enumerable methods
          2: Application demonstrates functional knowledge of Enumerable but only uses the most basic techniques
          1: Application demonstrates deficiencies with Enumerable and struggles with collections

          6. Code Sanitation
          4: Zero complaints
          3: Five or fewer complaints
          2: Six to ten complaints
          1: More than ten complaints

submissions:
    Morgan & Chelsea
    repository: 
    evaluation:
      notes: |
             |
             |
        Assessor: 
          1. Functional Expectations
          3: Application fulfills all base expectations as tested by the spec harness

          2. Test-Driven Development
          3: Application is well tested but does not balance isolation and integration tests, using only the data necessary to test the functionality

          3. Encapsulation / Breaking Logic into Components
          3: Application effectively breaks logical components apart but breaks the principle of SRP

          4. Fundamental Ruby & Style
          4: Application demonstrates excellent knowledge of Ruby syntax, style, and refactoring

          5. Enumerable & Collections
          3: Application demonstrates comfortable use of appropriate Enumerable methods

          6. Code Sanitation
          4: Five or fewer complaints

submissions:
    Brett & Whitney
    repository: https://github.com/whiemstra/sales_engine
    evaluation:
      notes: | Good job overall; great to see extensions included. Biggest improvement for the project
             | would be concision in test suite and some fixture data. Enumerables and ruby style are solid.
             | Main opportunity for improving structure is in delegating more responsibility to lower-level
             | objects.
        Assessor: Horace
          1. Functional Expectations
          4: Application fulfills all base expectations and two extensions

          2. Test-Driven Development
          3: Application is well tested but does not balance isolation and integration tests, using only the data necessary to test the functionality

          3. Encapsulation / Breaking Logic into Components
          3: Application effectively breaks logical components apart but breaks the principle of SRP

          4. Fundamental Ruby & Style
          3.5: Application shows strong effort towards organization, content, and refactoring

          5. Enumerable & Collections
          3: Application demonstrates comfortable use of appropriate Enumerable methods

          6. Code Sanitation
          4: Zero complaints

submissions:
    Max & Drew
    repository: https://github.com/adfink/sales-engine
    evaluation:
      notes: | Great test suite. The rest of the project is mostly ok, but there is a lot
             | of repetition among different repositories due to repeatedly accessing same data
             | via different paths. Project could be improved a lot by leveraging the relationships
             | more to avoid parent objects having to juggle so much data.
        Assessor: Horace
          1. Functional Expectations
          3: Application fulfills all base expectations as tested by the spec harness

          2. Test-Driven Development
          4: Application is broken into components which are well tested in both isolation and integration using appropriate data

          3. Encapsulation / Breaking Logic into Components
          3: Application effectively breaks logical components apart but breaks the principle of SRP

          4. Fundamental Ruby & Style
          3: Application shows strong effort towards organization, content, and refactoring

          5. Enumerable & Collections
          3: Application demonstrates comfortable use of appropriate Enumerable methods

          6. Code Sanitation
          4: Zero complaints
