submissions:
  Aaron Careaga:
    repo:
    instructor: Josh M.
    notes: Mostly JS and very little Ruby. Pushed boundries on what was taught in class. All data on the page is loading using AJAX.
    completion: 4
    organization: 4
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 3: Project demonstrates solid code quality and MVC principles.
    user-experience: 4: Project exhibits a production-ready and polished UX.
    performance: 2: Project pages load on average under 500 milliseconds.
  Adam Jensen:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Amber Crawford:
    repo:
    instructor: Josh M.
    notes: Solid project. Great use of abstractions. Created an internal API to consume from AJAX calls. Used background workers to consume Trelora API.
    completion: 3: Developer completed all the user stories and requirements set by the client.
    organization: 3: Developer used a project management tool to keep their project organized.
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 4: Project demonstrates exceptionally well factored code.
    user-experience: 4: Project exhibits a production-ready and polished UX.
    performance: 4: Project pages load on average under 300 milliseconds.
  Edgar Duran:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Emily Dowdle:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Jason Pilz:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Jerrod Paul Junker:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Jhun de Andres:
    repo:
    instructor: Josh M.
    notes: Mostly JS and very little Ruby. Pushed boundries on what was taught in class. All data on the page is loading using AJAX.
    completion: 4
    organization: 4
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 3: Project demonstrates solid code quality and MVC principles.
    user-experience: 4: Project exhibits a production-ready and polished UX.
    performance: 2: Project pages load on average under 500 milliseconds.
  Jill Donohue:
    repo:
    instructor: Josh M.
    notes: Solid project. Great use of abstractions. Created an internal API to consume from AJAX calls. Used background workers to consume Trelora API.
    completion: 3: Developer completed all the user stories and requirements set by the client.
    organization: 3: Developer used a project management tool to keep their project organized.
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 4: Project demonstrates exceptionally well factored code.
    user-experience: 4: Project exhibits a production-ready and polished UX.
    performance: 4: Project pages load on average under 300 milliseconds.
  John Slota:
    repo:
    instructor: Josh M.
    notes: Overall good. Good use of services and creation of a Parser class. Could have split apart methods into separate parser classes to make for more clear classes. Some of the Ruby implementation was reaching for not ideal enumerables.
    completion: 3: Developer completed all the user stories and requirements set by the client.
    organization: 3: Developer used a project management tool to keep their project organized.
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 2: Project demonstrates some gaps in code quality and/or application of MVC principles.
    user-experience: 3: Project exhibits a production-ready user experience.
    performance: 4: Project pages load on average under 300 milliseconds.
  Justin Pease:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Marlo Major:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Matt Rooney:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Matt Stjernholm:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Michael Wong:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Nicole Hall:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Pat Wey:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Robbie Lane:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Ross Edfort:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Ryan Johnson:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Sekhar Paladugu:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Shannon Paige:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Torie Warren:
    repo:
    instructor:
    notes:
    completion:
    organization:
    test-driven-development:
    code-quality:
    user-experience:
    performance:
  Tyler Komoroske:
    repo:
    instructor: Josh M.
    notes: Overall good. Good use of services and creation of a Parser class. Could have split apart methods into separate parser classes to make for more clear classes. Some of the Ruby implementation was reaching for not ideal enumerables.
    completion: 3: Developer completed all the user stories and requirements set by the client.
    organization: 3: Developer used a project management tool to keep their project organized.
    test-driven-development: 3: Project shows adequate testing (90% - 95% coverage).
    code-quality: 2: Project demonstrates some gaps in code quality and/or application of MVC principles.
    user-experience: 3: Project exhibits a production-ready user experience.
    performance: 4: Project pages load on average under 300 milliseconds.
